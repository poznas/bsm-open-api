<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bsm.oa.sm.dao.SideMissionRepository">

  <resultMap id="SideMissionTypeMap" type="com.bsm.oa.sm.model.SideMissionType">
    <result property="typeId" column="sm_type_id" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    <result property="equation" column="equation" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    <result property="descriptionDocumentUrl" column="doc_url" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    <result property="dictionaryName" column="dictionary_name" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    <collection property="performParams" ofType="com.bsm.oa.sm.model.PerformParam">
      <result property="symbol" column="equation_symbol" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="hint" column="param_hint" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="type" column="perform_param_type"/>
      <result property="toRateBy" column="to_rate_by"/>
      <result property="availableValuesSource" column="available_values_source"/>
    </collection>
    <collection property="proofRequirements" ofType="com.bsm.oa.sm.model.ProofRequirement">
      <result property="type" column="proof_req_type"/>
      <result property="hint" column="proof_hint" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="exampleUrl" column="proof_example_url" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    </collection>
  </resultMap>

  <sql id="sideMissionTypeColumns">
    t.sm_type_id,
    t.description_document_url as doc_url,
    t.equation,
    t.dictionary_name,

    p.equation_symbol,
    p.perform_param_type,
    p.to_rate_by,
    p.hint_dict_key as param_hint,
    p.available_values_source,

    r.proof_req_type,
    r.proof_example_url,
    r.hint_dict_key as proof_hint
  </sql>

  <update id="mergeSideMissionType" parameterType="com.bsm.oa.sm.model.SideMissionType">
    insert into side_mission_type(sm_type_id, description_document_url, equation, dictionary_name)
    values (#{typeId.value}, #{descriptionDocumentUrl.value}, #{equation.value},
    #{dictionaryName.value})
    on conflict (sm_type_id)
    do update set
    description_document_url = #{descriptionDocumentUrl.value},
    equation = #{equation.value},
    dictionary_name = #{dictionaryName.value};

    delete from side_mission_proof_req where sm_type_id = #{typeId.value};
    delete from side_mission_perform_param where sm_type_id = #{typeId.value};

    <foreach collection="performParams" item="p">
      insert into side_mission_perform_param
      (sm_type_id, equation_symbol, perform_param_type,
      to_rate_by, hint_dict_key, available_values_source)
      values (#{typeId.value}, #{p.symbol.value}, #{p.type}, #{p.toJudgeBy}, #{p.hint.value},
      #{p.availableValuesSource});
    </foreach>

    <foreach collection="proofRequirements" item="r">
      insert into side_mission_proof_req(sm_type_id, proof_req_type, proof_example_url,
      hint_dict_key) values
      (#{typeId.value}, #{r.type}, #{r.exampleUrl.value}, #{r.hint.value});
    </foreach>

  </update>

  <sql id="selectSideMissionTypes">
    select
    <include refid="sideMissionTypeColumns"/>
    from side_mission_type t
    join side_mission_perform_param p using (sm_type_id)
    join side_mission_proof_req r using (sm_type_id)
  </sql>

  <select id="getSideMissionTypes" resultMap="SideMissionTypeMap">
    <include refid="selectSideMissionTypes"/>
  </select>

  <select id="getSideMissionType" resultMap="SideMissionTypeMap">
    <include refid="selectSideMissionTypes"/>
    where t.sm_type_id = #{value}
  </select>

  <resultMap id="SideMissionReportMap" type="com.bsm.oa.sm.model.SideMissionReport">
    <result property="reportId" column="report_id" typeHandler="com.bsm.oa.common.mapper.LongVOHandler"/>
    <result property="missionTypeId" column="sm_type_id" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    <result property="reportTimestamp" column="report_time"/>
    <association property="performingUser">
      <result property="userId" column="user_id" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="username" column="username" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="imageUrl" column="image_url" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="teamId" column="team_id" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    </association>
    <association property="reportingUser">
      <result property="userId" column="rep_user_id" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="username" column="rep_username" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="imageUrl" column="rep_image_url" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="teamId" column="rep_team_id" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    </association>
  </resultMap>

  <sql id="selectReportColumns">
    r.report_id, r.sm_type_id, r.report_time,
    p.user_id,
    p.username,
    p.image_url,
    p.team_id,
    rep.user_id as rep_user_id,
    rep.username as rep_username,
    rep.image_url as rep_image_url,
    rep.team_id as rep_team_id
  </sql>

  <sql id="reportFilterCriteria">
    where r.valid
    and not r.rated
    and exists (select * from side_mission_perform_param
                            where sm_type_id = r.sm_type_id
                            and to_rate_by = #{toRateBy})
    and not exists (select * from sm_report_rate
                              where report_id = r.report_id
                              and rater_user_id = #{raterId.value})
    and p.team_id is not null
  </sql>

  <select id="selectReports" resultMap="SideMissionReportMap"
    parameterType="com.bsm.oa.sm.model.SideMissionReportFilter">
    select
    <include refid="selectReportColumns"/>
    from side_mission_report r
    left join users p on r.performing_user_id = p.user_id
    left join users rep on r.reporting_user_id = rep.user_id
    <include refid="reportFilterCriteria"/>
    order by r.report_time
    offset #{offset}
    limit #{pageSize}
  </select>

  <select id="selectReport" resultMap="SideMissionReportMap">
    select
    <include refid="selectReportColumns"/>
    from side_mission_report r
    left join users p on r.performing_user_id = p.user_id
    left join users rep on r.reporting_user_id = rep.user_id
    where r.report_id = #{value}
  </select>

  <select id="selectReportsCount" resultType="long"
    parameterType="com.bsm.oa.sm.model.SideMissionReportFilter">
    select count(*) from side_mission_report r
    left join users p on r.performing_user_id = p.user_id
    <include refid="reportFilterCriteria"/>
  </select>

  <insert id="insertSideMissionReport"
    parameterType="com.bsm.oa.sm.request.ReportSideMissionRequest">
    insert into side_mission_report(sm_type_id, performing_user_id, reporting_user_id) values
    (#{missionTypeId.value}, #{performingUserId.value}, #{reportingUserId.value});

    <foreach collection="proofMediaLinks" item="link">
      insert into side_mission_report_proof(report_id, proof_type, proof_url) values
      (currval('side_mission_report_report_id_seq'), #{link.type}, #{link.awsS3Url.value});
    </foreach>
  </insert>

  <select id="hasRatedReport" resultType="boolean">
    select exists (
    select * from sm_report_rate
      where report_id = #{reportId.value}
      and rater_user_id = #{userId.value}
    )
  </select>

  <insert id="insertReportRate">
    <foreach collection="rates" index="symbol" item="value">
      insert into sm_report_rate(sm_type_id, report_id, perform_param_symbol, rate_value, rater_user_id) select
      sm_type_id, #{reportId.value}, #{symbol.value}, #{value}, #{userId.value} from side_mission_report
      where report_id = #{reportId.value};
    </foreach>
  </insert>

  <resultMap id="ReportRateDataMap" type="com.bsm.oa.sm.model.ReportRateData">
    <result property="reportId" column="report_id" typeHandler="com.bsm.oa.common.mapper.LongVOHandler"/>
    <result property="equation" column="equation" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
    <collection property="paramRates" ofType="com.bsm.oa.sm.model.PerformParamRate">
      <result property="symbol" column="symbol" typeHandler="com.bsm.oa.common.mapper.StringVOHandler"/>
      <result property="assignedValue" column="rate_avg"/>
    </collection>
  </resultMap>

  <select id="getReportRateData" resultMap="ReportRateDataMap">
    select
      r.report_id,
      t.equation,
      param.equation_symbol as symbol,
      case when count(*) >= requiredJudgeRatesCount()
                or param.to_rate_by = 'PROFESSOR'
        then avg(rate.rate_value)
      else null end         as rate_avg
    from side_mission_report r
      natural join side_mission_type t
      natural join side_mission_perform_param param
      left join sm_report_rate rate
        on param.sm_type_id = rate.sm_type_id
           and param.equation_symbol = rate.perform_param_symbol
           and r.report_id = rate.report_id
    where rate.report_id = #{value}
          and r.valid and not r.rated
    group by r.report_id, t.equation, param.to_rate_by, param.equation_symbol
  </select>

  <update id="mergeReportPoints">
    insert into points(points_id, points_type, points_amount, user_id, team_id)
    select #{reportId.value}, 'SIDE_MISSION', #{points}, u.user_id, u.team_id
    from side_mission_report r
      join users u on r.performing_user_id = u.user_id
    where r.report_id = #{reportId.value}
    and u.team_id is not null

    on conflict (points_id, points_type)
    do update set points_amount = #{points};

    update side_mission_report set rated = true
    where report_id = #{reportId.value}
  </update>

</mapper>
