eval and insert report points if enough rates
create points table
validate rater type, POST /side-mission/report/{id}/rate/{raterType}
validate perform params rate values, POST /side-mission/report/{id}/rate/{raterType}
validate perform params presence, POST /side-mission/report/{id}/rate/{raterType}
impl find bean by annotation with value
impl POST /side-mission/report/{id}/rate/{raterType}
impl GET /side-mission/type/{typeId}
impl GET /side-mission/report/reports/{raterType}
impl RQ business validation, POST /side-mission/report
create sm report tables, impl sql insert, POST /side-mission/report
add mock API for POST /side-mission/report
impl GET /side-mission/type/types
create generic value object mybatis type handler
impl sql merge side mission type statement
add mock API for PUT /side-mission/type
create side mission related tables
impl GET /user/users/teammates
impl GET /user/my-privileges
refactor tokens [app access, app refresh, aws access] lifecycle
introduce a refresh token
aws access token refresh api, GET: /user/aws-token
impl GET & PUT /user/{userId}/privileges
return aws resource access data in headers, GET: /login
impl jwt filter
change code style -> tabs & indents: 2
impl jwt token provider
connect core database, create user & team table
configure swagger spring fox plugin
spring initializr
